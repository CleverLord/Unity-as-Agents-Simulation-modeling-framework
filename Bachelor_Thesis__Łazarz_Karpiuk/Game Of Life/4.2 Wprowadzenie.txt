Pierwszy z naszych projektów to Game Of Life. Uznaliśmy że, mimo iż ta symulacja nie jest do końca agentowa, a bardziej podchodzi pod kategorię automatów komórkowych, jest ona dobrym wprowadzeniem w naszą pracę, ponieważ jest to bardzo popularny model i zakładamy że nasz czytelnik go zna, dzięki czemu możemy skupić się na samych technicznych aspektach, czyli na tym, czym ta praca powinna być.

W praktyce są 3 symulacje w tym rozdziale, a każda z nich pokazuje coś innego. 
Pierwszy z nich to najbardziej typowe Game Of Life, zaprogramowane tak jak każdy by się tego spodziewał. Tablica dwuwymiarowa z aktualnym stanem planszy, druga tablica obok ze stanem następnym, i do tego pętla wyznaczająca przyszły stan komórki.
Następna symulacja jest nieco zmodyfikowana. Nazywamy ją wersją o podwójnym buforowaniu, ponieważ przy jej tworzeniu, zarządzanie pamięcią, a dokładniej poprawne przełączanie między dwiema flagami, było zasadniczą trudnością. Symulacja ta jest w pełni agentowa z punktu widzenia naszego narzędzia, ponieważ każda komórka jest oddzielnym agentem, a samo Unity woła na nich funkcję aktualizującą ich stany. 
Ostatnia wersja jest bardziej zbliżona do pierwszej pod kątem zarządzania pamięcią, jednak kod jej jest mało podobny do poprzednich. Unity pozwala na przyspieszanie obliczeń z wykorzystaniem GPU, jednak żeby z tego skorzystać, trzeba korzystać tylko z prostych struktur danych, ponieważ wszystko przed wykonaniem obliczeń jest kopiowane do pamięci karty graficznej. Bardziej skompilikowane algorytmy korzystają z tzw. Buforów Obliczeniowych `ComputeBuffer`, natomiast przy tak prostych algorytmach jak Game Of Life, możemy pokusić się o teoretycznie jeszcze bardziej wydajny sposób przyspieszania obliczeń na GPU. Zamiast stosować shadery obliczeniowe, możemy zastosować zwykłe, których dodatkowym ograniczeniem jest redukcja w.w jednowymiarowych list z własnymi strukturami, na rzecz Tekstur, czyli macierzy 2D złożonej z krotki czterech floatów, domyślnie reprezentujących czerwony, zielony, niebieski, i przezroczystość, ale ostatecznie to tylko bajty, które możemy interpretować w dowolny sposób.